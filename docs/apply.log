[0m[1mmodule.management_ec2.data.aws_iam_policy.AmazonSSMManagedInstanceCore: Reading...[0m[0m
[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1mdata.aws_kms_key.ebs: Reading...[0m[0m
[0m[1mmodule.management_ec2.data.aws_ec2_instance_type.this: Reading...[0m[0m
[0m[1mdata.aws_ami.amazon_linux_2: Reading...[0m[0m
[0m[1mdata.aws_kms_key.ebs: Read complete after 0s [id=fd32d304-e84a-4e15-892a-dd272913fd3d][0m
[0m[1mmodule.management_ec2.data.aws_ec2_instance_type.this: Read complete after 0s [id=t3.micro][0m
[0m[1mdata.aws_availability_zones.available: Read complete after 0s [id=us-east-1][0m
[0m[1mdata.aws_ami.amazon_linux_2: Read complete after 0s [id=ami-0254b2d5c4c472488][0m
[0m[1mmodule.management_ec2.data.aws_iam_policy.AmazonSSMManagedInstanceCore: Read complete after 2s [id=arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_autoscaling_group.app_asg[0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_group" "app_asg" {
      [32m+[0m[0m arn                              = (known after apply)
      [32m+[0m[0m availability_zones               = (known after apply)
      [32m+[0m[0m default_cooldown                 = (known after apply)
      [32m+[0m[0m desired_capacity                 = 2
      [32m+[0m[0m force_delete                     = false
      [32m+[0m[0m force_delete_warm_pool           = false
      [32m+[0m[0m health_check_grace_period        = 120
      [32m+[0m[0m health_check_type                = "EC2"
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_failed_scaling_activities = false
      [32m+[0m[0m load_balancers                   = (known after apply)
      [32m+[0m[0m max_size                         = 6
      [32m+[0m[0m metrics_granularity              = "1Minute"
      [32m+[0m[0m min_size                         = 2
      [32m+[0m[0m name                             = "app-asg"
      [32m+[0m[0m name_prefix                      = (known after apply)
      [32m+[0m[0m predicted_capacity               = (known after apply)
      [32m+[0m[0m protect_from_scale_in            = false
      [32m+[0m[0m service_linked_role_arn          = (known after apply)
      [32m+[0m[0m target_group_arns                = (known after apply)
      [32m+[0m[0m vpc_zone_identifier              = (known after apply)
      [32m+[0m[0m wait_for_capacity_timeout        = "10m"
      [32m+[0m[0m warm_pool_size                   = (known after apply)

      [32m+[0m[0m availability_zone_distribution (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = "$Latest"
        }

      [32m+[0m[0m mixed_instances_policy (known after apply)

      [32m+[0m[0m tag {
          [32m+[0m[0m key                 = "Name"
          [32m+[0m[0m propagate_at_launch = true
          [32m+[0m[0m value               = "app-asg"
        }

      [32m+[0m[0m traffic_source (known after apply)
    }

[1m  # aws_eip.nat[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name" = "nat-eip"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name" = "nat-eip"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # aws_internet_gateway.igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "vpc-igw"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "vpc-igw"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # aws_key_pair.management[0m will be created
[0m  [32m+[0m[0m resource "aws_key_pair" "management" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m fingerprint     = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m key_name        = "management-key"
      [32m+[0m[0m key_name_prefix = (known after apply)
      [32m+[0m[0m key_pair_id     = (known after apply)
      [32m+[0m[0m key_type        = (known after apply)
      [32m+[0m[0m public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCxJFiE10M5qX0POs6i7e/HC9dOIf85eUhEJ4Xgu8l/F92x9D84Inz07zXgVXbfFnCqPdM9ARGMJoTWrKLsQKEYVfbLdQbO8YOKdHLjds4krRwutRmeQbZv+d3DTvt8oou54cTfp6TuaEnrLp204oq2DvNOX8A155zi8NHYkowXWzANjurrkTKXeEin6ESWIr4qEj3mlHcCKsX1M8AFVmGAEfbmeWQQeE0VtOdj4HNxbY94wWLk+bswvhSY07J84S0MWcMU0Taw6RTgg2nDyLpOSrbPyAcQfM6sMOJpdRHvC/bqxlbUD4mBcRg697B3o/xRVh7w+JwGX1rr75kLMb3xL78MPrKg2Y5x0QJuXCWbdKO5cb18HnfH1bvW1blqRydQc6xwIio5wroNDOcSfwMw1ckguz+nbFS9V+eORbPigs1t0te1nSgthh+p5rvJpkuXLGGcCVD6TQVx+ZF2uf42bX5Io6luOWJY6CIzepyqBWvAz33zfl6pwxd5hxYPp+v7eSjx7sRSInWrV2KqHJdCQtHEqV4iyR/iFlGShbq3/0BBArwa6MkcfM7k3/hYcEYFkl3HKgvDmDyOkiyIFNHJX9Qo2jBbCUKq8IL6BScVcesx7GPvwzl4QWzVtaMFQm7LQy7CW1mwfzXORdGKNWztthXms/bKMEPhUHWcpBZoAw== dusti@LAPTOP-63FI8EBU"
      [32m+[0m[0m tags_all        = (known after apply)
    }

[1m  # aws_launch_template.app_lt[0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "app_lt" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m image_id               = "ami-0254b2d5c4c472488"
      [32m+[0m[0m instance_type          = "t3.micro"
      [32m+[0m[0m key_name               = "management-key"
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "app-lt-"
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m user_data              = "IyEvYmluL2Jhc2gKeXVtIHVwZGF0ZSAteQp5dW0gaW5zdGFsbCAteSBodHRwZApzeXN0ZW1jdGwgZW5hYmxlIGh0dHBkCnN5c3RlbWN0bCBzdGFydCBodHRwZAplY2hvICJIZWxsbyBmcm9tICQoaG9zdG5hbWUpIChpbnN0YW5jZS1pZDogJChjdXJsIC1zIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbGF0ZXN0L21ldGEtZGF0YS9pbnN0YW5jZS1pZCkpIiA+IC92YXIvd3d3L2h0bWwvaW5kZXguaHRtbA=="
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Name" = "app-server"
            }
        }
    }

[1m  # aws_lb.app_alb[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "app_alb" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enable_zonal_shift                                           = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = (known after apply)
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "app-alb"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "Name" = "app-alb"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Name" = "app-alb"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)

      [32m+[0m[0m subnet_mapping (known after apply)
    }

[1m  # aws_lb_listener.http[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "http" {
      [32m+[0m[0m arn                                                                   = (known after apply)
      [32m+[0m[0m id                                                                    = (known after apply)
      [32m+[0m[0m load_balancer_arn                                                     = (known after apply)
      [32m+[0m[0m port                                                                  = 80
      [32m+[0m[0m protocol                                                              = "HTTP"
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_max_age_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_content_security_policy_header_value            = (known after apply)
      [32m+[0m[0m routing_http_response_server_enabled                                  = (known after apply)
      [32m+[0m[0m routing_http_response_strict_transport_security_header_value          = (known after apply)
      [32m+[0m[0m routing_http_response_x_content_type_options_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_x_frame_options_header_value                    = (known after apply)
      [32m+[0m[0m ssl_policy                                                            = (known after apply)
      [32m+[0m[0m tags_all                                                              = (known after apply)
      [32m+[0m[0m tcp_idle_timeout_seconds                                              = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }

      [32m+[0m[0m mutual_authentication (known after apply)
    }

[1m  # aws_lb_target_group.app_tg[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "app_tg" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "app-tg"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 80
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "app-tg"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "app-tg"
        }
      [32m+[0m[0m target_type                        = "instance"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 2
          [32m+[0m[0m interval            = 30
          [32m+[0m[0m matcher             = "200"
          [32m+[0m[0m path                = "/"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 5
          [32m+[0m[0m unhealthy_threshold = 2
        }

      [32m+[0m[0m stickiness (known after apply)

      [32m+[0m[0m target_failover (known after apply)

      [32m+[0m[0m target_group_health (known after apply)

      [32m+[0m[0m target_health_state (known after apply)
    }

[1m  # aws_nat_gateway.nat[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "nat-gateway"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "nat-gateway"
        }
    }

[1m  # aws_route_table.private[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "private-rt"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "private-rt"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table.public[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "public-rt"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "public-rt"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table_association.mgmt_assoc["0"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "mgmt_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.mgmt_assoc["1"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "mgmt_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.private["0"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.private["1"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_security_group.alb_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "alb_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow HTTP from Internet to ALB"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "HTTP from Internet"
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = "alb-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "alb-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "alb-sg"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.app_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "app_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow HTTP from ALB and SSH from management instance"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = "HTTP from ALB"
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = "SSH from management instance"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
        ]
      [32m+[0m[0m name                   = "app-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "app-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "app-sg"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.mgmt_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "mgmt_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow SSH from allowed_mgmt_ip to management instance"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow all outbound"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m ",
                ]
              [32m+[0m[0m description      = "SSH from admin IP"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
        ]
      [32m+[0m[0m name                   = "mgmt-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "mgmt-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "mgmt-sg"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_subnet.app[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "app" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.1.10.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "app-subnet-0"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "app-subnet-0"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.app[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "app" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.1.11.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "app-subnet-1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "app-subnet-1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.backend[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "backend" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.1.20.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "backend-subnet"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "backend-subnet"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.management[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "management" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.1.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "management-subnet-0"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "management-subnet-0"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.management[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "management" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.1.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "management-subnet-1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "management-subnet-1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.1.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "coalfire-vpc"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "coalfire-vpc"
        }
    }

[1m  # aws_vpc_endpoint.s3[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "s3" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = (known after apply)
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.us-east-1.s3"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name" = "s3-endpoint"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name" = "s3-endpoint"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Gateway"
      [32m+[0m[0m vpc_id                = (known after apply)

      [32m+[0m[0m dns_options (known after apply)

      [32m+[0m[0m subnet_configuration (known after apply)
    }

[1m  # module.management_ec2.aws_instance.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "this" {
      [32m+[0m[0m ami                                  = "ami-0254b2d5c4c472488"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = true
      [32m+[0m[0m enable_primary_ipv6                  = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "management-key"
      [32m+[0m[0m monitoring                           = true
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "CNAME"      = "management-instance"
          [32m+[0m[0m "Name"       = "management-instance"
          [32m+[0m[0m "PatchGroup" = "1"
          [32m+[0m[0m "Role"       = "management"
          [32m+[0m[0m "name"       = "management-instance"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "CNAME"      = "management-instance"
          [32m+[0m[0m "Name"       = "management-instance"
          [32m+[0m[0m "PatchGroup" = "1"
          [32m+[0m[0m "Role"       = "management"
          [32m+[0m[0m "name"       = "management-instance"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m volume_tags                          = {
          [32m+[0m[0m "Name" = "management-instance"
          [32m+[0m[0m "Role" = "management"
          [32m+[0m[0m "name" = "management-instance"
        }
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m instance_market_options (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = "disabled"
          [32m+[0m[0m http_put_response_hop_limit = 1
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = "enabled"
        }

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device {
          [32m+[0m[0m delete_on_termination = true
          [32m+[0m[0m device_name           = (known after apply)
          [32m+[0m[0m encrypted             = true
          [32m+[0m[0m iops                  = (known after apply)
          [32m+[0m[0m kms_key_id            = "arn:aws:kms:us-east-1:980833626314:key/fd32d304-e84a-4e15-892a-dd272913fd3d"
          [32m+[0m[0m tags_all              = (known after apply)
          [32m+[0m[0m throughput            = (known after apply)
          [32m+[0m[0m volume_id             = (known after apply)
          [32m+[0m[0m volume_size           = 10
          [32m+[0m[0m volume_type           = "gp3"
        }
    }

[1m  # module.management_ec2.module.security_group[0].aws_security_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "management-instance-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1mPlan:[0m 27 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m alb_dns_name         = (known after apply)
  [32m+[0m[0m app_subnet_ids       = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m backend_subnet_ids   = (known after apply)
  [32m+[0m[0m management_subnet_id = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m vpc_id               = (known after apply)
[0m[1maws_key_pair.management: Creating...[0m[0m
[0m[1maws_eip.nat: Creating...[0m[0m
[0m[1maws_vpc.main: Creating...[0m[0m
[0m[1maws_key_pair.management: Creation complete after 1s [id=management-key][0m
[0m[1maws_eip.nat: Creation complete after 1s [id=eipalloc-01940ea77b347c407][0m
[0m[1maws_vpc.main: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_vpc.main: Creation complete after 12s [id=vpc-0f152a15d66a8b3cb][0m
[0m[1maws_subnet.app[1]: Creating...[0m[0m
[0m[1maws_subnet.app[0]: Creating...[0m[0m
[0m[1maws_route_table.private: Creating...[0m[0m
[0m[1maws_subnet.management[1]: Creating...[0m[0m
[0m[1maws_internet_gateway.igw: Creating...[0m[0m
[0m[1maws_subnet.management[0]: Creating...[0m[0m
[0m[1maws_subnet.backend: Creating...[0m[0m
[0m[1maws_security_group.mgmt_sg: Creating...[0m[0m
[0m[1maws_lb_target_group.app_tg: Creating...[0m[0m
[0m[1maws_security_group.alb_sg: Creating...[0m[0m
[0m[1maws_internet_gateway.igw: Creation complete after 1s [id=igw-0a10d6b13170e2064][0m
[0m[1maws_route_table.public: Creating...[0m[0m
[0m[1maws_route_table.private: Creation complete after 1s [id=rtb-09fe0abd1d7cbc4f7][0m
[0m[1mmodule.management_ec2.module.security_group[0].aws_security_group.this: Creating...[0m[0m
[0m[1maws_subnet.app[1]: Creation complete after 2s [id=subnet-001500d0d37118071][0m
[0m[1maws_vpc_endpoint.s3: Creating...[0m[0m
[0m[1maws_lb_target_group.app_tg: Creation complete after 2s [id=arn:aws:elasticloadbalancing:us-east-1:980833626314:targetgroup/app-tg/69a3eb344cd06ed1][0m
[0m[1maws_route_table.public: Creation complete after 1s [id=rtb-0a2ed8327137f4500][0m
[0m[1mmodule.management_ec2.module.security_group[0].aws_security_group.this: Creation complete after 2s [id=sg-01ca1eb211d62e0de][0m
[0m[1maws_security_group.alb_sg: Creation complete after 3s [id=sg-05305213b02905a77][0m
[0m[1maws_security_group.mgmt_sg: Creation complete after 4s [id=sg-09e7cf0c7b6b6eaa7][0m
[0m[1maws_security_group.app_sg: Creating...[0m[0m
[0m[1maws_subnet.app[0]: Creation complete after 4s [id=subnet-01532d771600f03be][0m
[0m[1maws_route_table_association.private["0"]: Creating...[0m[0m
[0m[1maws_route_table_association.private["1"]: Creating...[0m[0m
[0m[1maws_route_table_association.private["0"]: Creation complete after 0s [id=rtbassoc-03ea7ac7c7c406804][0m
[0m[1maws_route_table_association.private["1"]: Creation complete after 0s [id=rtbassoc-09239ec5e75f5f51f][0m
[0m[1maws_subnet.backend: Creation complete after 4s [id=subnet-018b1093943dfb22f][0m
[0m[1maws_security_group.app_sg: Creation complete after 2s [id=sg-09560f70abfae0311][0m
[0m[1maws_launch_template.app_lt: Creating...[0m[0m
[0m[1maws_vpc_endpoint.s3: Creation complete after 6s [id=vpce-089f1f349755915be][0m
[0m[1maws_subnet.management[0]: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_subnet.management[1]: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_subnet.management[0]: Creation complete after 12s [id=subnet-0372982cd211fc966][0m
[0m[1maws_nat_gateway.nat: Creating...[0m[0m
[0m[1mmodule.management_ec2.aws_instance.this[0]: Creating...[0m[0m
[0m[1maws_launch_template.app_lt: Creation complete after 6s [id=lt-0d30fd6c89b01416c][0m
[0m[1maws_autoscaling_group.app_asg: Creating...[0m[0m
[0m[1maws_subnet.management[1]: Creation complete after 14s [id=subnet-0430d910e7cecdaac][0m
[0m[1maws_route_table_association.mgmt_assoc["0"]: Creating...[0m[0m
[0m[1maws_route_table_association.mgmt_assoc["1"]: Creating...[0m[0m
[0m[1maws_lb.app_alb: Creating...[0m[0m
[0m[1maws_route_table_association.mgmt_assoc["1"]: Creation complete after 1s [id=rtbassoc-0efb5d11d4b0a35c1][0m
[0m[1maws_route_table_association.mgmt_assoc["0"]: Creation complete after 1s [id=rtbassoc-0b0f8431a116bd453][0m
[0m[1maws_autoscaling_group.app_asg: Creation complete after 9s [id=app-asg][0m
[0m[1maws_nat_gateway.nat: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.management_ec2.aws_instance.this[0]: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.management_ec2.aws_instance.this[0]: Creation complete after 14s [id=i-07db8cd0daa40ffc3][0m
[0m[1maws_nat_gateway.nat: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [00m30s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [00m30s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [00m40s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [00m40s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [00m50s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [00m50s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m00s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [01m00s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m10s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [01m10s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m20s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [01m20s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m30s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [01m30s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m40s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [01m40s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Creation complete after 1m44s [id=nat-0dd2e546ab4c94cef][0m
[0m[1maws_lb.app_alb: Still creating... [01m50s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [02m00s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [02m10s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [02m20s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [02m30s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [02m40s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [02m50s elapsed][0m[0m
[0m[1maws_lb.app_alb: Still creating... [03m00s elapsed][0m[0m
[0m[1maws_lb.app_alb: Creation complete after 3m4s [id=arn:aws:elasticloadbalancing:us-east-1:980833626314:loadbalancer/app/app-alb/698d514dff10a48e][0m
[0m[1maws_lb_listener.http: Creating...[0m[0m
[0m[1maws_lb_listener.http: Creation complete after 0s [id=arn:aws:elasticloadbalancing:us-east-1:980833626314:listener/app/app-alb/698d514dff10a48e/0a34daf86d87e39c][0m
[0m[1m[32m
Apply complete! Resources: 27 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0malb_dns_name = "app-alb-2020208952.us-east-1.elb.amazonaws.com"
app_subnet_ids = [
  "subnet-01532d771600f03be",
  "subnet-001500d0d37118071",
]
backend_subnet_ids = "subnet-018b1093943dfb22f"
management_subnet_id = [
  "subnet-0372982cd211fc966",
  "subnet-0430d910e7cecdaac",
]
vpc_id = "vpc-0f152a15d66a8b3cb"

Apply took - 
Days              : 0
Hours             : 0
Minutes           : 3
Seconds           : 35
Milliseconds      : 556
Ticks             : 2155563592
TotalDays         : 0.00249486526851852
TotalHours        : 0.0598767664444444
TotalMinutes      : 3.59260598666667
TotalSeconds      : 215.5563592
TotalMilliseconds : 215556.3592


